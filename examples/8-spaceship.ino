/*
 * ----------------------------------------------------------------------------
 * Spaceship
 * ----------------------------------------------------------------------------
 * Copyright (c) 2021 St√©phane Calderoni (https://github.com/m1cr0lab)
 * ----------------------------------------------------------------------------
 * A basic game template with sprite animation
 * ----------------------------------------------------------------------------
 */

#include <ESPboy.h>

LGFX_Sprite framebuffer(&espboy.tft);

struct Space {

    static uint8_t  constexpr       STAR_LEVELS             = 3;
    static uint8_t  const constexpr STAR_COUNT[STAR_LEVELS] = {   32,     16,     8    };
    static uint16_t const constexpr STAR_COLOR[STAR_LEVELS] = { 0x055f, 0x9eff, 0xffff };

    struct Star {
        uint8_t x, y, z;
        float_t vy;
    };

    Star *stars = nullptr;

    Space() {

        uint8_t stars_n = 0;
        for (uint8_t z = 0; z < STAR_LEVELS; ++z) stars_n += STAR_COUNT[z];
        stars = new Star[stars_n];

        for (uint8_t z = 0; z < STAR_LEVELS; ++z) {
            uint8_t const n = STAR_COUNT[z];
            for (uint8_t i = 0; i < n; ++i) {
                Star * const s = &stars[i];
                s->x  = random(TFT_WIDTH);
                s->y  = random(TFT_HEIGHT);
                s->z  = z;
                s->vy = 1 + .25f * s->z;
            }
        }

    }

    ~Space() { delete[] stars; }

    void update() {

        for (uint8_t z = 0; z < STAR_LEVELS; ++z) {
            uint8_t const n = STAR_COUNT[z];
            for (uint8_t i = 0; i < n; ++i) {
                Star * const s = &stars[i];
                s->y += s->vy;
                if (s->y + 1 > TFT_HEIGHT) {
                    s->x = random(TFT_WIDTH);
                    s->y = 0;
                }
            }
        }

    }

    void draw() const {

        for (uint8_t z = 0; z < STAR_LEVELS; ++z) {
            uint8_t const n = STAR_COUNT[z];
            for (uint8_t i = 0; i < n; ++i) {
                Star * const s = &stars[i];
                framebuffer.drawPixel(s->x, s->y, STAR_COLOR[s->z]);
            }
        }

    }

};

struct Spaceship {

    static uint8_t constexpr W  = 16;
    static uint8_t constexpr H  = 14;
    static uint8_t constexpr Y  = 96;
    static uint8_t constexpr VX = 2;

    static uint16_t const constexpr SPRITE[] PROGMEM = {

        /* frame 0 */ 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x00f8, 0x00f8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x8631, 0x96b5, 0x8631, 0x8631, 0x8631, 0x3184, 0x96b5, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x3184, 0x96b5, 0x8631, 0x96b5, 0x8631, 0x8631, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x3184, 0x96b5, 0x8631, 0x96b5, 0x8631, 0x3184, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x3184, 0x96b5, 0x8631, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x3184, 0x3184, 0x96b5, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0xffff, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8,
        /* frame 1 */ 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x3184, 0x00f8, 0x00f8, 0xcc5a, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0xcc5a, 0xcc5a, 0x1ff8, 0xcc5a, 0x8631, 0xcc5a, 0x8631, 0x8631, 0x96b5, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x8631, 0x3184, 0xcc5a, 0x0000, 0xcc5a, 0xcc5a, 0x3184, 0x8631, 0xcc5a, 0x8631, 0x3184, 0x96b5, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x8631, 0x3184, 0xcc5a, 0x0000, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0xcc5a, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x8631, 0x3184, 0xcc5a, 0xcc5a, 0xcc5a, 0xcc5a, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x3184, 0x96b5, 0x3184, 0x96b5, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0xffff, 0xcc5a, 0x1ff8, 0x3184, 0x3184, 0x96b5, 0x3184, 0x96b5, 0xcc5a, 0x8631, 0x8631, 0x1ff8, 0xffff, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x96b5, 0x3184, 0x96b5, 0xcc5a, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8,  
        /* frame 2 */ 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x00f8, 0x00f8, 0xcc5a, 0x3184, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x8631, 0x8631, 0x96b5, 0x96b5, 0x3184, 0x8631, 0x8631, 0x8631, 0xcc5a, 0x0000, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x8631, 0x8631, 0x96b5, 0x96b5, 0x3184, 0x8631, 0x8631, 0x8631, 0xcc5a, 0x0000, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x3184, 0x3184, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0xcc5a, 0x3184, 0x3184, 0xcc5a, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0x96b5, 0xcc5a, 0x3184, 0x3184, 0xcc5a, 0xffff, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0xcc5a, 0x3184, 0x3184, 0xcc5a, 0x3184, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8,
        /* frame 3 */ 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0xcc5a, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x3184, 0x96b5, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x8631, 0x8631, 0x8631, 0x96b5, 0xcc5a, 0x0000, 0x8631, 0x8631, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x8631, 0x8631, 0x8631, 0x96b5, 0xcc5a, 0x0000, 0x8631, 0x8631, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x3184, 0x3184, 0x96b5, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0xcc5a, 0x96b5, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xcc5a, 0xcc5a, 0x96b5, 0xcc5a, 0x96b5, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x96b5, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8,
        /* frame 4 */ 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0xcc5a, 0x00f8, 0x00f8, 0xcc5a, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0xcc5a, 0xcc5a, 0xcc5a, 0x96b5, 0xcc5a, 0xcc5a, 0x0000, 0x0000, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x96b5, 0xcc5a, 0xcc5a, 0xcc5a, 0x96b5, 0xcc5a, 0xcc5a, 0x0000, 0x0000, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0xcc5a, 0xcc5a, 0xcc5a, 0xcc5a, 0x96b5, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x0000, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0xcc5a, 0xcc5a, 0x3184, 0x3184, 0x0000, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0xcc5a, 0x3184, 0x3184, 0x0000, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8,
        /* frame 5 */ 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x8631, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x3184, 0xcc5a, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0x1ff8, 0x1ff8, 0x3184, 0x8631, 0xcc5a, 0x00f8, 0x00f8, 0x8631, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x1ff8, 0x96b5, 0x96b5, 0xcc5a, 0x96b5, 0x8631, 0x8631, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0xcc5a, 0x3184, 0x8631, 0x3184, 0x96b5, 0x96b5, 0xcc5a, 0x96b5, 0x8631, 0x3184, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0xcc5a, 0x3184, 0x8631, 0x3184, 0x96b5, 0x96b5, 0x96b5, 0x96b5, 0x3184, 0x3184, 0x96b5, 0x3184, 0x3184, 0xcc5a, 0xcc5a, 0x8631, 0xcc5a, 0x3184, 0x3184, 0x3184, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x96b5, 0x3184, 0x3184, 0x3184, 0xcc5a, 0x3184, 0x1ff8, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0xffff, 0xcc5a, 0x1ff8, 0x96b5, 0x96b5, 0x3184, 0x3184, 0x3184, 0xcc5a, 0x3184, 0x3184, 0x1ff8, 0x96b5, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x96b5, 0x96b5, 0x3184, 0x3184, 0x3184, 0xcc5a, 0x3184, 0x3184, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0xffff, 0x3184, 0x3184, 0xcc5a, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8, 0x1ff8

    };

    static uint8_t constexpr BEAM_COUNT = 4;

    struct Beam {

        static uint8_t constexpr W  = 2;
        static uint8_t constexpr H  = 8;
        static uint8_t constexpr VY = 2;

        int8_t x, y;
        bool   alive;

        void update() {
            if (alive) {
                y -= VY; if (y + H < 0) alive = false;
            }
        }

        void draw() const {
            if (alive) {
                framebuffer.fillRect(x, y, W, H, 0x7f5);
            }
        }

    };

    int8_t   x;
    float_t  vx;
    int8_t   flip_dir;
    bool     flipping;
    uint32_t last_flip_ms;
    uint8_t  frame;
    uint8_t  beam_index;
    Beam     beam[BEAM_COUNT];

    Spaceship()
    : x((TFT_WIDTH - W) >> 1)
    , vx(0)
    , flip_dir(0)
    , flipping(false)
    , frame(0)
    , beam_index(0)
    {}

    void left()  { vx = -VX; }
    void right() { vx =  VX; }
    
    void flip(int8_t const dir) {
        flip_dir = dir;
        flipping = true;
    }

    void fire() {

        Beam * const b = &beam[beam_index];

        b->x = x + ((W - Beam::W) >> 1);
        b->y = Y - Beam::H;
        b->alive = true;

        ++beam_index %= BEAM_COUNT;

    }

    void update() {

        if (vx) {
            x  += vx;
            vx *= .9f; if (abs(vx) < .4f) vx = 0;
        }

        if (x < 0) {

            x = 0;
            vx = 0;

        } else if (x + W > TFT_WIDTH) {

            x = TFT_WIDTH - W;
            vx = 0;

        }

        if (flipping) {

            uint32_t const now = millis();
            if (now - last_flip_ms > 50) {

                if (flip_dir == -1) {
                    switch (frame) {
                        case 0: frame = 1; break;
                        case 1: frame = 2; break;
                        case 2: frame = 3; break;
                        case 3: frame = 4; break;
                        case 4: frame = 5; break;
                        case 5: frame = 0; flipping = false;
                    }
                } else {
                    switch (frame) {
                        case 0: frame = 5; break;
                        case 1: frame = 0; flipping = false; break;
                        case 2: frame = 1; break;
                        case 3: frame = 2; break;
                        case 4: frame = 3; break;
                        case 5: frame = 4;
                    }
                }

                last_flip_ms = now;

            }

        }

        for (uint8_t i = 0; i < BEAM_COUNT; ++i) beam[i].update();

    }

    void draw() const {

        framebuffer.pushImage(x, Y, W, H, SPRITE + frame * W * H, 0x1ff8);

        for (uint8_t i = 0; i < BEAM_COUNT; ++i) beam[i].draw();

    }

};

Space space;
Spaceship ship;

void setup() {

    espboy.begin();
    framebuffer.createSprite(TFT_WIDTH, TFT_HEIGHT);
    
}

void loop() {

    espboy.update();

         if (espboy.button.pressed(Button::LEFT))  { ship.flip(-1); }
    else if (espboy.button.pressed(Button::RIGHT)) { ship.flip( 1); }
    else if (espboy.button.held(Button::LEFT))     { ship.left();   }
    else if (espboy.button.held(Button::RIGHT))    { ship.right();  }

    if (espboy.button.pressed(Button::ACT)) ship.fire();

    space.update();
    ship.update();

    framebuffer.clear();
    space.draw();
    ship.draw();
    framebuffer.pushSprite(0, 0);

}

/*
 * ----------------------------------------------------------------------------
 * ESPboy Library
 * ----------------------------------------------------------------------------
 * Copyright (c) 2021 St√©phane Calderoni (https://github.com/m1cr0lab)
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 * ----------------------------------------------------------------------------
 */